{"noir_version":"0.34.0+359caafac5e489901d9ff02b08d1a688178d9b0a","hash":14888187797211693441,"abi":{"parameters":[{"name":"key","type":{"kind":"field"},"visibility":"private"},{"name":"hand","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"}],"return_type":{"abi_type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"","file_map":{"26":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_le_radix(256)\n    }\n    // docs:end:to_le_bytes\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_be_radix(256)\n    }\n    // docs:end:to_be_bytes\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"37":{"source":"mod hash;\nmod aes128;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod embedded_curve_ops;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod collections;\nmod compat;\nmod convert;\nmod option;\nmod string;\nmod test;\nmod cmp;\nmod ops;\nmod default;\nmod prelude;\nmod uint128;\nmod bigint;\nmod runtime;\nmod meta;\nmod append;\nmod mem;\nmod panic;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32\n) {\n    crate::assert_constant(proof_type);\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\n","path":"std/lib.nr"},"69":{"source":"fn main(key: Field, hand: pub [Field; 2]) -> pub [Field; 2] {\n    let decoded_hand: [Field; 2] = gmimc::bn254::dec::x5_2(hand, key);\n    let encoded_hand: [Field; 2] = gmimc::bn254::enc::x5_2(decoded_hand, key);\n    assert(hand == encoded_hand);\n\n    println(decoded_hand);\n    decoded_hand\n}\n\n","path":"/home/vcart/internship/dominion-starknet/circuits/decryption/src/main.nr"},"70":{"source":"use crate::bn254::consts;\nuse crate::decrypt;\nuse crate::GmimcConfig;\n\n#[field(bn254)]\npub fn x5_2(mut x: [Field; 2], k: Field) -> [Field; 2] {\n    decrypt(consts::x5_2_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_3(mut x: [Field; 3], k: Field) -> [Field; 3] {\n    decrypt(consts::x5_3_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_4(mut x: [Field; 4], k: Field) -> [Field; 4] {\n    decrypt(consts::x5_4_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_5(mut x: [Field; 5], k: Field) -> [Field; 5] {\n    decrypt(consts::x5_5_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_6(mut x: [Field; 6], k: Field) -> [Field; 6] {\n    decrypt(consts::x5_6_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_7(mut x: [Field; 7], k: Field) -> [Field; 7] {\n    decrypt(consts::x5_7_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_8(mut x: [Field; 8], k: Field) -> [Field; 8] {\n    decrypt(consts::x5_8_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_9(mut x: [Field; 9], k: Field) -> [Field; 9] {\n    decrypt(consts::x5_9_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_10(mut x: [Field; 10], k: Field) -> [Field; 10] {\n    decrypt(consts::x5_10_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_11(mut x: [Field; 11], k: Field) -> [Field; 11] {\n    decrypt(consts::x5_11_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_12(mut x: [Field; 12], k: Field) -> [Field; 12] {\n    decrypt(consts::x5_12_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_13(mut x: [Field; 13], k: Field) -> [Field; 13] {\n    decrypt(consts::x5_13_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_14(mut x: [Field; 14], k: Field) -> [Field; 14] {\n    decrypt(consts::x5_14_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_15(mut x: [Field; 15], k: Field) -> [Field; 15] {\n    decrypt(consts::x5_15_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_16(mut x: [Field; 16], k: Field) -> [Field; 16] {\n    decrypt(consts::x5_16_config(), x, k)\n}\n","path":"/home/vcart/nargo/github.com/TaceoLabs/noir-GMiMCv0.3.0/src/bn254/dec.nr"},"72":{"source":"use crate::bn254::consts;\nuse crate::encrypt;\nuse crate::GmimcConfig;\n\n#[field(bn254)]\npub fn x5_2(mut x: [Field; 2], k: Field) -> [Field; 2] {\n    encrypt(consts::x5_2_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_3(mut x: [Field; 3], k: Field) -> [Field; 3] {\n    encrypt(consts::x5_3_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_4(mut x: [Field; 4], k: Field) -> [Field; 4] {\n    encrypt(consts::x5_4_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_5(mut x: [Field; 5], k: Field) -> [Field; 5] {\n    encrypt(consts::x5_5_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_6(mut x: [Field; 6], k: Field) -> [Field; 6] {\n    encrypt(consts::x5_6_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_7(mut x: [Field; 7], k: Field) -> [Field; 7] {\n    encrypt(consts::x5_7_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_8(mut x: [Field; 8], k: Field) -> [Field; 8] {\n    encrypt(consts::x5_8_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_9(mut x: [Field; 9], k: Field) -> [Field; 9] {\n    encrypt(consts::x5_9_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_10(mut x: [Field; 10], k: Field) -> [Field; 10] {\n    encrypt(consts::x5_10_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_11(mut x: [Field; 11], k: Field) -> [Field; 11] {\n    encrypt(consts::x5_11_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_12(mut x: [Field; 12], k: Field) -> [Field; 12] {\n    encrypt(consts::x5_12_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_13(mut x: [Field; 13], k: Field) -> [Field; 13] {\n    encrypt(consts::x5_13_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_14(mut x: [Field; 14], k: Field) -> [Field; 14] {\n    encrypt(consts::x5_14_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_15(mut x: [Field; 15], k: Field) -> [Field; 15] {\n    encrypt(consts::x5_15_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_16(mut x: [Field; 16], k: Field) -> [Field; 16] {\n    encrypt(consts::x5_16_config(), x, k)\n}\n","path":"/home/vcart/nargo/github.com/TaceoLabs/noir-GMiMCv0.3.0/src/bn254/enc.nr"},"74":{"source":"use dep::std::field::modulus_num_bits;\n\n/// Instantiations of GMiMC for prime field of the same order as BN254\nmod bn254;\n\nstruct GmimcConfig<R> {\n    alpha: Field, // S-box power; depends on the underlying field\n    arc: [Field; R], // round constants\n}\n\npub fn config<R> (alpha: Field, arc: [Field; R]) -> GmimcConfig<R> {\n    GmimcConfig { alpha, arc }\n}\n\nfn round<T>(mut state: [Field; T], key: Field, alpha: Field, arc: Field) -> [Field; T] {\n    let sum = state[0] + key + arc;\n    let power = sum.pow_32(alpha);\n    for i in 1..T {\n        state[i] += power;\n    }\n    state\n}\n\nfn dec_round<T>(mut state: [Field; T], key: Field, alpha: Field, arc: Field) -> [Field; T] {\n    let sum = state[0] + key + arc;\n    let power = sum.pow_32(alpha);\n    for i in 1..T {\n        state[i] -= power;\n    }\n    state\n}\n\nfn feistel_shift<T>(mut state: [Field; T]) -> [Field; T] {\n    let tmp = state[T - 1];\n    for i in 1..T {\n        state[T - i] = state[T - i - 1];\n    }\n    state[0] = tmp;\n    state\n}\n\nfn inv_feistel_shift<T>(mut state: [Field; T]) -> [Field; T] {\n    let tmp = state[0];\n    for i in 0..T - 1 {\n        state[i] = state[i + 1];\n    }\n    state[T - 1] = tmp;\n    state\n}\n\n// General GMiMC block cipher\npub fn encrypt<T, R>(gmimc_conf: GmimcConfig<R>, mut x: [Field; T], k: Field) -> [Field; T] {\n    // otherwise key is too small\n    assert(modulus_num_bits() as u16 >= 128);\n\n    let GmimcConfig {alpha, arc} = gmimc_conf;\n\n    for r in 0..R - 1 {\n        x = round(x, k, alpha, arc[r]);\n        x = feistel_shift(x);\n    }\n    x = round(x, k, alpha, arc[R - 1]);\n    x\n}\n\npub fn decrypt<T, R>(gmimc_conf: GmimcConfig<R>, mut x: [Field; T], k: Field) -> [Field; T] {\n    // otherwise key is too small\n    assert(modulus_num_bits() as u16 >= 128);\n\n    let GmimcConfig {alpha, arc} = gmimc_conf;\n\n    for r in 1..R {\n        x = dec_round(x, k, alpha, arc[R - r]);\n        x = inv_feistel_shift(x);\n    }\n    x = dec_round(x, k, alpha, arc[0]);\n    x\n}\n\n#[test]\nfn test_enc_x5_02() {\n    let x = [8654, 872364];\n    let k = 1246;\n    let cipher = bn254::enc::x5_2(x, k);\n    let plain = bn254::dec::x5_2(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_03() {\n    let x = [8654, 872364, 872634];\n    let k = 1246;\n    let cipher = bn254::enc::x5_3(x, k);\n    let plain = bn254::dec::x5_3(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_04() {\n    let x = [8654, 872364, 872634, 6723];\n    let k = 1246;\n    let cipher = bn254::enc::x5_4(x, k);\n    let plain = bn254::dec::x5_4(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_05() {\n    let x = [8654, 872364, 872634, 6723, 98234];\n    let k = 1246;\n    let cipher = bn254::enc::x5_5(x, k);\n    let plain = bn254::dec::x5_5(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_06() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394];\n    let k = 1246;\n    let cipher = bn254::enc::x5_6(x, k);\n    let plain = bn254::dec::x5_6(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_07() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745];\n    let k = 1246;\n    let cipher = bn254::enc::x5_7(x, k);\n    let plain = bn254::dec::x5_7(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_08() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075];\n    let k = 1246;\n    let cipher = bn254::enc::x5_8(x, k);\n    let plain = bn254::dec::x5_8(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_09() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974];\n    let k = 1246;\n    let cipher = bn254::enc::x5_9(x, k);\n    let plain = bn254::dec::x5_9(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_10() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734];\n    let k = 1246;\n    let cipher = bn254::enc::x5_10(x, k);\n    let plain = bn254::dec::x5_10(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_11() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734, 64];\n    let k = 1246;\n    let cipher = bn254::enc::x5_11(x, k);\n    let plain = bn254::dec::x5_11(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_12() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734, 64, 1212];\n    let k = 1246;\n    let cipher = bn254::enc::x5_12(x, k);\n    let plain = bn254::dec::x5_12(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_13() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734, 64, 1212, 7893];\n    let k = 1246;\n    let cipher = bn254::enc::x5_13(x, k);\n    let plain = bn254::dec::x5_13(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_14() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734, 64, 1212, 7893, 4536];\n    let k = 1246;\n    let cipher = bn254::enc::x5_14(x, k);\n    let plain = bn254::dec::x5_14(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_15() {\n    let x = [\n        8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734, 64, 1212, 7893, 4536, 23\n    ];\n    let k = 1246;\n    let cipher = bn254::enc::x5_15(x, k);\n    let plain = bn254::dec::x5_15(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_16() {\n    let x = [\n        8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734, 64, 1212, 7893, 4536, 23, 53\n    ];\n    let k = 1246;\n    let cipher = bn254::enc::x5_16(x, k);\n    let plain = bn254::dec::x5_16(cipher, k);\n    assert(x == plain);\n}\n","path":"/home/vcart/nargo/github.com/TaceoLabs/noir-GMiMCv0.3.0/src/lib.nr"}},"names":["main"],"brillig_names":["print_unconstrained"]}