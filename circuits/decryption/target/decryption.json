{"noir_version":"0.36.0+801c71880ecf8386a26737a5d8bb5b4cb164b2ab","hash":15465485505956910592,"abi":{"parameters":[{"name":"key","type":{"kind":"field"},"visibility":"private"},{"name":"card","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"26":{"source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"37":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod schnorr;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod eddsa;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod ec;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod bigint;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(\n        crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y),\n    )\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\n","path":"std/lib.nr"},"70":{"source":"fn main(key: Field, card: [Field; 2]) -> pub Field {\n    let decoded_card = gmimc::bn254::dec::x5_2(card, key);\n    println(decoded_card[0]);\n    println(decoded_card[1]);\n    decoded_card[0]\n}\n\n","path":"/home/vcart/internship/dominion-starknet/circuits/decryption/src/main.nr"},"71":{"source":"use crate::bn254::consts;\nuse crate::decrypt;\n\n#[field(bn254)]\npub fn x5_2(mut x: [Field; 2], k: Field) -> [Field; 2] {\n    decrypt(consts::x5_2_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_3(mut x: [Field; 3], k: Field) -> [Field; 3] {\n    decrypt(consts::x5_3_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_4(mut x: [Field; 4], k: Field) -> [Field; 4] {\n    decrypt(consts::x5_4_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_5(mut x: [Field; 5], k: Field) -> [Field; 5] {\n    decrypt(consts::x5_5_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_6(mut x: [Field; 6], k: Field) -> [Field; 6] {\n    decrypt(consts::x5_6_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_7(mut x: [Field; 7], k: Field) -> [Field; 7] {\n    decrypt(consts::x5_7_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_8(mut x: [Field; 8], k: Field) -> [Field; 8] {\n    decrypt(consts::x5_8_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_9(mut x: [Field; 9], k: Field) -> [Field; 9] {\n    decrypt(consts::x5_9_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_10(mut x: [Field; 10], k: Field) -> [Field; 10] {\n    decrypt(consts::x5_10_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_11(mut x: [Field; 11], k: Field) -> [Field; 11] {\n    decrypt(consts::x5_11_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_12(mut x: [Field; 12], k: Field) -> [Field; 12] {\n    decrypt(consts::x5_12_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_13(mut x: [Field; 13], k: Field) -> [Field; 13] {\n    decrypt(consts::x5_13_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_14(mut x: [Field; 14], k: Field) -> [Field; 14] {\n    decrypt(consts::x5_14_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_15(mut x: [Field; 15], k: Field) -> [Field; 15] {\n    decrypt(consts::x5_15_config(), x, k)\n}\n\n#[field(bn254)]\npub fn x5_16(mut x: [Field; 16], k: Field) -> [Field; 16] {\n    decrypt(consts::x5_16_config(), x, k)\n}\n","path":"/home/vcart/nargo/github.com/TaceoLabs/noir-GMiMCv0.4.0/src/bn254/dec.nr"},"75":{"source":"use dep::std::field::modulus_num_bits;\n\n/// Instantiations of GMiMC for prime field of the same order as BN254\npub mod bn254;\n\npub struct GmimcConfig<let R: u32> {\n    alpha: Field, // S-box power; depends on the underlying field\n    arc: [Field; R], // round constants\n}\n\npub fn config<let R: u32>(alpha: Field, arc: [Field; R]) -> GmimcConfig<R> {\n    GmimcConfig { alpha, arc }\n}\n\nfn round<let T: u32>(mut state: [Field; T], key: Field, alpha: Field, arc: Field) -> [Field; T] {\n    let sum = state[0] + key + arc;\n    let power = sum.pow_32(alpha);\n    for i in 1..T {\n        state[i] += power;\n    }\n    state\n}\n\nfn dec_round<let T: u32>(\n    mut state: [Field; T],\n    key: Field,\n    alpha: Field,\n    arc: Field,\n) -> [Field; T] {\n    let sum = state[0] + key + arc;\n    let power = sum.pow_32(alpha);\n    for i in 1..T {\n        state[i] -= power;\n    }\n    state\n}\n\nfn feistel_shift<let T: u32>(mut state: [Field; T]) -> [Field; T] {\n    let tmp = state[T - 1];\n    for i in 1..T {\n        state[T - i] = state[T - i - 1];\n    }\n    state[0] = tmp;\n    state\n}\n\nfn inv_feistel_shift<let T: u32>(mut state: [Field; T]) -> [Field; T] {\n    let tmp = state[0];\n    for i in 0..T - 1 {\n        state[i] = state[i + 1];\n    }\n    state[T - 1] = tmp;\n    state\n}\n\n// General GMiMC block cipher\npub fn encrypt<let T: u32, let R: u32>(\n    gmimc_conf: GmimcConfig<R>,\n    mut x: [Field; T],\n    k: Field,\n) -> [Field; T] {\n    // otherwise key is too small\n    assert(modulus_num_bits() as u16 >= 128);\n\n    let GmimcConfig { alpha, arc } = gmimc_conf;\n\n    for r in 0..R - 1 {\n        x = round(x, k, alpha, arc[r]);\n        x = feistel_shift(x);\n    }\n    x = round(x, k, alpha, arc[R - 1]);\n    x\n}\n\npub fn decrypt<let T: u32, let R: u32>(\n    gmimc_conf: GmimcConfig<R>,\n    mut x: [Field; T],\n    k: Field,\n) -> [Field; T] {\n    // otherwise key is too small\n    assert(modulus_num_bits() as u16 >= 128);\n\n    let GmimcConfig { alpha, arc } = gmimc_conf;\n\n    for r in 1..R {\n        x = dec_round(x, k, alpha, arc[R - r]);\n        x = inv_feistel_shift(x);\n    }\n    x = dec_round(x, k, alpha, arc[0]);\n    x\n}\n\n#[test]\nfn test_enc_x5_02() {\n    let x = [8654, 872364];\n    let k = 1246;\n    let cipher = bn254::enc::x5_2(x, k);\n    let plain = bn254::dec::x5_2(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_03() {\n    let x = [8654, 872364, 872634];\n    let k = 1246;\n    let cipher = bn254::enc::x5_3(x, k);\n    let plain = bn254::dec::x5_3(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_04() {\n    let x = [8654, 872364, 872634, 6723];\n    let k = 1246;\n    let cipher = bn254::enc::x5_4(x, k);\n    let plain = bn254::dec::x5_4(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_05() {\n    let x = [8654, 872364, 872634, 6723, 98234];\n    let k = 1246;\n    let cipher = bn254::enc::x5_5(x, k);\n    let plain = bn254::dec::x5_5(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_06() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394];\n    let k = 1246;\n    let cipher = bn254::enc::x5_6(x, k);\n    let plain = bn254::dec::x5_6(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_07() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745];\n    let k = 1246;\n    let cipher = bn254::enc::x5_7(x, k);\n    let plain = bn254::dec::x5_7(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_08() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075];\n    let k = 1246;\n    let cipher = bn254::enc::x5_8(x, k);\n    let plain = bn254::dec::x5_8(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_09() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974];\n    let k = 1246;\n    let cipher = bn254::enc::x5_9(x, k);\n    let plain = bn254::dec::x5_9(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_10() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734];\n    let k = 1246;\n    let cipher = bn254::enc::x5_10(x, k);\n    let plain = bn254::dec::x5_10(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_11() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734, 64];\n    let k = 1246;\n    let cipher = bn254::enc::x5_11(x, k);\n    let plain = bn254::dec::x5_11(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_12() {\n    let x = [8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734, 64, 1212];\n    let k = 1246;\n    let cipher = bn254::enc::x5_12(x, k);\n    let plain = bn254::dec::x5_12(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_13() {\n    let x = [\n        8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734, 64, 1212, 7893,\n    ];\n    let k = 1246;\n    let cipher = bn254::enc::x5_13(x, k);\n    let plain = bn254::dec::x5_13(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_14() {\n    let x = [\n        8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734, 64, 1212, 7893,\n        4536,\n    ];\n    let k = 1246;\n    let cipher = bn254::enc::x5_14(x, k);\n    let plain = bn254::dec::x5_14(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_15() {\n    let x = [\n        8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734, 64, 1212, 7893,\n        4536, 23,\n    ];\n    let k = 1246;\n    let cipher = bn254::enc::x5_15(x, k);\n    let plain = bn254::dec::x5_15(cipher, k);\n    assert(x == plain);\n}\n\n#[test]\nfn test_enc_x5_16() {\n    let x = [\n        8654, 872364, 872634, 6723, 98234, 72394, 983745, 3289075, 283974, 2180734, 64, 1212, 7893,\n        4536, 23, 53,\n    ];\n    let k = 1246;\n    let cipher = bn254::enc::x5_16(x, k);\n    let plain = bn254::dec::x5_16(cipher, k);\n    assert(x == plain);\n}\n","path":"/home/vcart/nargo/github.com/TaceoLabs/noir-GMiMCv0.4.0/src/lib.nr"}},"names":["main"],"brillig_names":["print_unconstrained"]}